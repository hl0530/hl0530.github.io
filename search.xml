<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[win7下ping不是内部或外部命令]]></title>
      <url>http://yoursite.com/2016/09/18/win7%E4%B8%8Bping%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引用自<a href="http://jingyan.baidu.com/article/200957619b7930cb0721b485.html" target="_blank" rel="external">http://jingyan.baidu.com/article/200957619b7930cb0721b485.html</a></p>
</blockquote>
<ul>
<li><p>第一步：右击“我的电脑”，选择“属性”，弹出如下界面，然后选择“高级系统设置”。</p>
</li>
<li><p>第二步：弹出“系统设置”界面，选择“高级”，选择“环境变量”。</p>
</li>
<li><p>第三步：在“环境变量”中找“系统变量”，在其下面找到“path”路径的设置，选中，点击“编辑”，然后在最后面添加一句代码“C:\windows\system32\”，即可，此时需注意的是，如果前面有语句，那么此时，一定要加“;”英文状态下的分号，即“;C:\windows\system32\”,复制后面即可。然后一直确定即可。</p>
</li>
<li><p>第四步：重新进入cmd下，输入ping，弹出如下对话框，表示设置成功了。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博文]]></title>
      <url>http://yoursite.com/2016/09/18/%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="抬头信息记录："><a href="#抬头信息记录：" class="headerlink" title="抬头信息记录："></a>抬头信息记录：</h3><pre><code>title:  #文章标题
date:  #时间，一般不用改
categories:  #目录分类
tags:  #标签，格式可以是[Hexo,总结]，中间用英文逗号分开
keywords:  #文章关键词，多个关键词用英文逗号隔开
</code></pre><a id="more"></a>
<h3 id="图片试发"><a href="#图片试发" class="headerlink" title="图片试发"></a>图片试发</h3><hr>
<p>七牛云存储：（700kb大小）<br><img src="http://o6hbo6ufa.bkt.clouddn.com/1680x1050_wallpaper_nature_widescreen_03.jpg" alt="try"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建hexo博客小记——hexo系列文章（一）]]></title>
      <url>http://yoursite.com/2016/09/18/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文主要介绍在Github下搭建Hexo博客。总体说来，搭建Hexo总共需要两步：</p>
<ul>
<li>第一部分，部署本地博客，也就是在你的电脑上搭建起来Web环境；</li>
<li>第二部分，生成静态页面，并上传到Github上去。<a id="more"></a></li>
</ul>
<h2 id="搭建本地博客系统"><a href="#搭建本地博客系统" class="headerlink" title="搭建本地博客系统"></a>搭建本地博客系统</h2><p>搭建本地博客系统首先要部署环境，即Node.js和Git。</p>
<h3 id="Node-js的安装"><a href="#Node-js的安装" class="headerlink" title="Node.js的安装"></a>Node.js的安装</h3><p>可以<a href="https://nodejs.org/" target="_blank" rel="external">点此</a>下载nodejs，并按照步骤一步步安装；一切默认即可；</p>
<h3 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h3><p>git bash，<a href="https://git-scm.com/downloads" target="_blank" rel="external">点此</a>下载即可。<br>部署好本地环境，便可以开始安装博客系统Hexo了</p>
<h3 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h3><p>Hexo可直接用<code>npm</code>安装，可在电脑任意文件夹下右键Git Bash Here，进去后，在命令行中输入</p>
<pre><code>npm install -g hexo
</code></pre><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><pre><code>npm install
</code></pre><h3 id="发布本地博客"><a href="#发布本地博客" class="headerlink" title="发布本地博客"></a>发布本地博客</h3><p>到上一步为止，本地博客已搭建完成，下面我们可以发布本地博客看看效果：（即生成静态页面）</p>
<pre><code>hexo generate
hexo server
</code></pre><p>当然，也可以用简写：</p>
<pre><code>hexo g
hexo s
</code></pre><p>本地服务器开启后，我们就可以进入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>浏览本地博客了。</p>
<h2 id="上传本地文件到Github"><a href="#上传本地文件到Github" class="headerlink" title="上传本地文件到Github"></a>上传本地文件到Github</h2><h3 id="申请账号并建立仓库。"><a href="#申请账号并建立仓库。" class="headerlink" title="申请账号并建立仓库。"></a>申请账号并建立仓库。</h3><p>账号自行申请，建立仓库即在页面右上角的+除新建一个<code>repository</code>。但是命名有要求，必须用你的用户名加上github.io来命名仓库名。比如你的用户名为user123，那么就命名为user123.github.io。</p>
<h3 id="获取SSH公钥，并与Github账号绑定。"><a href="#获取SSH公钥，并与Github账号绑定。" class="headerlink" title="获取SSH公钥，并与Github账号绑定。"></a>获取SSH公钥，并与Github账号绑定。</h3><h4 id="设置邮箱和用户名"><a href="#设置邮箱和用户名" class="headerlink" title="设置邮箱和用户名"></a>设置邮箱和用户名</h4><pre><code>git config --global user.email &quot;user123@gmail.com&quot; 
</code></pre><p>git config –global user.name “user123”</p>
<h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><pre><code>ssh-keygen -t rsa -C &quot;user@gmail.com&quot;
</code></pre><p>命令运行后，会在<code>C:\Users\你的计算机名\.ssh</code>中找到<code>id_rsa.pub</code>这个文件，貌似是pubication的文件，但是我用office打不开，所以不管它了，如果有老兄知道这个究竟是用什么打开比较好，可以在评论区告诉我。不过它也是可以用txt打开的，将其中的内容复制到以下位置：</p>
<p>先登录github，点击右上角你的账户头像，进入settings，进入SSH key选项卡，将<code>id_rsa.pub</code>中的所有内容添加进去即可。</p>
<h4 id="更改博客配置，为上传做准备。"><a href="#更改博客配置，为上传做准备。" class="headerlink" title="更改博客配置，为上传做准备。"></a>更改博客配置，为上传做准备。</h4><p>打开<code>D:\hexo</code>目录下的配置文件<code>_config.yml</code>（推荐用软件Sublime Text打开，不要用txt打开，因为这要UTF-8编码，而txt不会编码），翻到最下面，并改成以下内容，把<code>user123g</code>替换成你的用户名即可</p>
<pre><code>deploy:
type: git
repository: https://github.com/user123/user123.github.io.git
branch: master
</code></pre><p>注意：<code>type</code>后面一定要是<code>git</code>，不要填<code>Github</code>。这是最新版hexo的要求。还有就是上面配置文件的语法较为严格<code>type:</code>后面一定要留一个空格，<code>repository</code>，<code>branch</code>也一样。</p>
<h2 id="上传博客内容"><a href="#上传博客内容" class="headerlink" title="上传博客内容"></a>上传博客内容</h2><h3 id="先生成静态文件"><a href="#先生成静态文件" class="headerlink" title="先生成静态文件"></a>先生成静态文件</h3><pre><code>hexo g
</code></pre><h3 id="部署前先输入以下命令，不然会出现error-deployer-not-found-github的报错。"><a href="#部署前先输入以下命令，不然会出现error-deployer-not-found-github的报错。" class="headerlink" title="部署前先输入以下命令，不然会出现error deployer not found:github的报错。"></a>部署前先输入以下命令，不然会出现<code>error deployer not found:github</code>的报错。</h3><pre><code>npm install hexo-deployer-git --save
</code></pre><h3 id="上传文档（部署）"><a href="#上传文档（部署）" class="headerlink" title="上传文档（部署）"></a>上传文档（部署）</h3><pre><code>hexo d
</code></pre><p>待出现<code>INFO Deploy done: git</code>即成功。成功后，进入网址<code>http://user123..github.io</code>浏览查看。</p>
<p>至此，所有工作都已完成，如果想更改主题什么的，可以看我后续的博客。有问题欢迎大家留言。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Endnote的style]]></title>
      <url>http://yoursite.com/2016/09/18/Endnote%E7%9A%84style/</url>
      <content type="html"><![CDATA[<p>参考文献style:</p>
<p>Chinese Std GBT7714</p>
<ul>
<li><p>附上 <a href="https://my.pcloud.com/publink/show?code=XZlVCQZLKN5QnRFiPX6zm1oYzf9CfrRdCKk" target="_blank" rel="external">下载地址</a></p>
</li>
<li><p>安装方法：</p>
<ul>
<li>拷到…/style  文件夹下即可。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决MathPage.wll或MathType.dll文件找不到问题]]></title>
      <url>http://yoursite.com/2016/09/18/%E8%A7%A3%E5%86%B3MathPage.wll%E6%88%96MathType.dll%E6%96%87%E4%BB%B6%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>以office 2013为例：</p>
<ul>
<li><p>步骤一 要确保路径被office信任。依次打开word-&gt;文件-&gt;选项-&gt;信任中心-&gt;信任中心设置-&gt;添加新位置，添加…(自己的office安装目录)\Microsoft Office\Office15\STARTUP。</p>
</li>
<li><p>步骤二<br>（懒得找就在最后附的下载地址中下载）<br>在MathType安装目录下找到以下文件(for x64)：<br>C:\Program Files (x86)\MathType\MathPage\64\MathPage.wll<br>C:\Program Files (x86)\MathType\Office Support\64\MathType Commands 6 For Word 2013.dotm</p>
</li>
<li><p>步骤三 将两个文件分别拷贝到各自的文件夹中，将MathType Commands 6 For Word 2013.dotm拷贝到…（你自己的安装目录）\Microsoft Office\Office15\STARTUP,将MathPage.wll拷贝到C:\Program Files\Microsoft Office\Office15之下<strong>而不是都拷贝到STARTUP文件夹中</strong></p>
</li>
</ul>
<p>附文件下载地址：</p>
<p><a href="https://my.pcloud.com/publink/show?code=kZY1PQZzwt4zLmVgekbJJYPEuINFFy0aVIy" target="_blank" rel="external">https://my.pcloud.com/publink/show?code=kZY1PQZzwt4zLmVgekbJJYPEuINFFy0aVIy</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[beamer的theme]]></title>
      <url>http://yoursite.com/2016/09/18/beamer%E7%9A%84theme/</url>
      <content type="html"><![CDATA[<p>发现两个不错的网站</p>
<ul>
<li><p>所有自带的主题列表</p>
<pre><code>https://www.hartwork.org/beamer-theme-matrix/
</code></pre></li>
<li><p>这个网站也有不少好主题</p>
<p><a href="https://latex.simon04.net/" target="_blank" rel="external">https://latex.simon04.net/</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[重建MATLAB 2015a与.m文件的关联]]></title>
      <url>http://yoursite.com/2016/09/18/%E9%87%8D%E5%BB%BAMATLAB%202015a%E4%B8%8E.m%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%B3%E8%81%94/</url>
      <content type="html"><![CDATA[<ul>
<li><p>第一步，下载网盘中的相关文件</p>
<p><a href="https://my.pcloud.com/publink/show?code=kZBawQZix7VpLECCHRCUrXNRtmuBQeLipY7" target="_blank" rel="external">下载地址</a></p>
</li>
<li><p>第二步，将压缩包中private文件夹中的三个文件复制到：“…(自己的matlab安装目录)\mcr\toolbox\matlab\winfun\private\”文件夹里；</p>
</li>
<li><p>第三步，以管理员权限打开MATLAB。</p>
</li>
<li><p>第四步，在MATLAB中打开解压出来的matlab_fileassociation.m，并执行。</p>
</li>
<li><p>完成</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[coding和github同时使用]]></title>
      <url>http://yoursite.com/2016/09/18/coding%E5%92%8Cgithub%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="coding和github同时使用"><a href="#coding和github同时使用" class="headerlink" title="coding和github同时使用"></a>coding和github同时使用</h1><p>##引言  </p>
<p>先贴几个我的参考网站：</p>
<blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">非常好的git学习站（入门）</a><br><a href="http://www.tuicool.com/articles/NZNJVvB" target="_blank" rel="external">Git管理多个远程仓库(以Github和Coding为例)</a><br><a href="http://my.oschina.net/450192529/blog/636106" target="_blank" rel="external">如何在同一台电脑上使用两个github,一个往coding推，一个往github推，亲测有效哦</a><br><a href="http://blog.csdn.net/chaoyue0071/article/details/41824339" target="_blank" rel="external">如何在同一台电脑上使用两个github账户</a><br><a href="http://www.cnblogs.com/sheldonxu/archive/2012/09/17/2688281.html" target="_blank" rel="external">执行ssh-add时出现Could not open a connection to your authentication agent</a><br><a href="http://blog.163.com/023_dns/blog/static/1187273662013111301046930/" target="_blank" rel="external">github常见操作和常见错误！错误提示：fatal: remote origin already exists. </a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VS学习笔记（一）]]></title>
      <url>http://yoursite.com/2016/09/18/VS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="Solution-Explorer"><a href="#Solution-Explorer" class="headerlink" title="Solution Explorer"></a>Solution Explorer</h2><p><code>Source Files</code> 放源文件(<code>.c</code>、<code>.cpp</code>)程序的实现代码全放在这里<br><code>Header Files</code> 放头文件(<code>.h</code>)声明放在这里<br><code>Resource Files</code> 资源文件(<code>.rc</code>)放图标、图片、菜单、文字之类的，主要用来做界面的东东一般都放这里<br><code>External Dependencies</code> 除上三种以外的，程序编译时用到的文件全放这里</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构学习笔记（一）]]></title>
      <url>http://yoursite.com/2016/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="C语言内容"><a href="#C语言内容" class="headerlink" title="C语言内容"></a>C语言内容</h2><h3 id="指向结构体成员运算符"><a href="#指向结构体成员运算符" class="headerlink" title="指向结构体成员运算符"></a>指向结构体成员运算符</h3><p><code>-&gt;</code>运算符叫做<strong>“指向结构体成员运算符”</strong>，是C语言和C++语言的一个运算符，用处是使用一个指向结构体或对象的指针访问其内成员。</p>
<blockquote>
<p>以下引用自<a href="http://zhidao.baidu.com/link?url=-VYVabFPcdFIvfc3l_kfZ_E5HIRqLV-Mg4yMzx99lr6rOWSR6Fx6SualG-juM-XN1Z1rUxbH04NjEnC9ox4d5q" target="_blank" rel="external">百度知道</a><br><a id="more"></a><br><code>-&gt;</code>是一个整体，它是用于指向结构体、C++中的class等含有子数据的指针用来取子数据。换种说法，如果我们在C语言中定义了一个结构体，然后申明一个指针指向这个结构体，那么我们要用指针取出结构体中的数据，就要用到“-&gt;”.<br>举个例子：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">struct Data  </div><div class="line">&#123;  </div><div class="line">   int a,b,c;  </div><div class="line">&#125;;              /*定义结构体*/  </div><div class="line">struct Data * p;/*定义结构体指针*/  </div><div class="line">struct Data A = &#123;1,2,3&#125;;/*声明变量A*/  </div><div class="line">int x;/*声明一个变量x*/  </div><div class="line">p = &amp;A ; /*让p指向A*/  </div><div class="line">x = p-&gt;a;/*这句话的意思就是取出p所指向的结构体中包含的数据项a赋值给x*/  </div><div class="line">         /*由于此时p指向A，因而 p-&gt;a == A.a,也就是1*/</div></pre></td></tr></table></figure>
<p>对于一开始的问题 <code>p = p-&gt;next</code>;这应该出现在C语言的链表，这里的<code>next</code>应该是一个与p同类型的结构体指针，其定义格式应该是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">struct Data  </div><div class="line">&#123;  </div><div class="line">   int a;  </div><div class="line">   struct Data * next;  </div><div class="line">&#125;;/*定义结构体*/  </div><div class="line">…………  </div><div class="line">main()  </div><div class="line">&#123;  </div><div class="line">   struct Data * p;/*声明指针变量p*/  </div><div class="line">  ……  </div><div class="line">   p = p-&gt;next;/*将next中的值赋给p*/  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>链表指针是C语言的一个难点，但也是重点，学懂了非常有用。要仔细讲就必须先讲变量、指针。<br>什么是变量？所谓变量，不要浅显的认为会变得量就是变量。套用我们院长的问话：“教室变不变？”变，因为每天有不同的人在里面上课，但又不变，因为教室始终在那，没有变大或变小。这就是变量：有一个不变的地址和一块可变的存储空间。正常情况下，我们只看到变量这个房间里面的东西，也就是其内容，但不会关注变量的地址，但是C语言的指针，就是这个房间的地址。我们声明变量就相当于盖了间房子存放东西，我们可以直接观看房子里的东西，而声明指针，就是相当于获得了一个定位器，当用指针指向某个变量时，就是用指针给变量定位，以后我们就可以用指针找到他所“跟踪”的变量并可以获得里面的内容。<br>那结构体呢？结构体就相当于是有好几个房子组成的别墅，几个房子绑定在一起使用。假设现在有很多这种别墅分布在一个大迷宫里，每间别墅里都有一间房子。里面放了另一个别墅的位置信息，现在你手拿定位器找到了第一栋别墅，从里面得到了你想要的东西（链表的数据部分）,然后把下一栋别墅的位置计入你的定位器<code>（p = p-&gt;next）</code>，再走向下一栋别墅……如此走下去，知道走到某地下一栋别墅信息没有了<code>（p-&gt;next == NULL）</code>，你的旅行结束。这就是链表一次遍历的过程。现在你能明白 <code>p=p-&gt;next</code>的含义了吧！</p>
<blockquote>
<p>以下引用自<a href="http://zhidao.baidu.com/link?url=Tp6RcraC7jYs7o_ElVkWchVD8Gq7FUJcu0IyUpYQBoTAFCLNhyLVuWl2Up50gKceXtXjJ8zPNRCkFPCgKKL7VK" target="_blank" rel="external">百度知道</a></p>
</blockquote>
<p>这是结构体指针中的一个符号，给你写个程序解释一下吧，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">struct STU //定义一个结构体</div><div class="line">&#123;</div><div class="line">int num;</div><div class="line">&#125;stu;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">struct STU *p;  //定义一个结构体指针</div><div class="line">p=stu;  //p指向stu这个结构体变量</div><div class="line">stu.num=100;  //给结构体成员num附个初值</div><div class="line">printf(&quot;%d&quot;,p-&gt;num);   //输出stu中的num的值</div><div class="line">return；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到了吧，<code>-&gt;</code>的作法就是在引用结构体中的变量！！<br>形式如：<code>p-&gt;</code>结构体成员（如<code>p-&gt;num</code>）<br>他的作用相当于<code>stu.num</code>或<code>(*p).num</code></p>
<h3 id="定义别名typedef"><a href="#定义别名typedef" class="headerlink" title="定义别名typedef"></a>定义别名typedef</h3><p>在计算机编程语言中用来为复杂的声明定义简单的别名，与宏定义有些差异。</p>
<blockquote>
<p>引用自知乎：<br>作者：Skycell<br>链接：<a href="https://www.zhihu.com/question/19894694/answer/13278588" target="_blank" rel="external">https://www.zhihu.com/question/19894694/answer/13278588</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<p>先熟悉指针函数的声明形式：<code>数据类型 (* 指针变量名) (形参列表)</code>;<br>例如： <code>int (* func)(void);//这是一个变量声明语句(指针函数的声明)</code>，声明了一个函数指针变量<code>func</code>，注意区别指针函数和函数指针。 <code>func = &amp;test; //变量赋值(给指针函数赋值);</code> </p>
<p>那么现在来理解<code>typedef int (* func)(void)</code>语句；<br>1.去掉<code>&quot;typedef&quot;</code>得到一个正常的变量声明语句(指针函数声明): <code>int (*func)(void)</code>;这里变量func的类型为一个函数类型，而当加上”<code>typedef</code>“后，就得到一个新的类型, 原来的变量名称func就变成新类型的名称，func不再是变量名称，而是一个新类型名－－func，用这个新的类型就可以去定义和原来func变量相同类型的变量，注意看去除和加上”typedef“时func的变化，没有”typedef”时，func为变量名，加上”typedef”时，func为类型名(这个类型等同于原来func变量的类型)，因此下面正确：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef int (* t_func)(void);//定义了一个新类型 t_func; </div><div class="line">int (*func)(void); 变量声明语句(指针函数声明): </div><div class="line">//.... </div><div class="line">t_func func2 = func; //func2和func是相同类型，这就好理解加上&quot;typedef&quot;产生的变化了。</div></pre></td></tr></table></figure></p>
<p>可以这么想，加上”typedef”关键字后，原来语句声明的变量变成类型，以下正确： </p>
<ol>
<li>int id; ==&gt; typedef int ID; //在加上”typedef”后，变量id就变成类型ID(为了清楚，把类型变大写)，这个新类型等同于原来变量对应的类型; id &lt;==&gt;ID id ; </li>
<li>int a[10]; ==&gt; typedef int A[10];//加上”typedef”后，变量a就成了类型A(为了清楚，把类型变大写)，这个新类型等同于原来变量对应的类型; a &lt;=&gt; A a; </li>
</ol>
<blockquote>
<p>引用结束</p>
</blockquote>
<h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><blockquote>
<p>引用自<a href="http://zhidao.baidu.com/link?url=sDdeHri7PlwImTQ4AJnVx17F1uivgRy7K4IFtxZX8o6osvuyYi_dB3PVQ_SYSLwfuCWGrX7ph-TTmHtV9uU2Hq" target="_blank" rel="external">百度知道</a></p>
</blockquote>
<p>将L.elem这个指针指向一块通过malloc函数分配的内存的地址<br>这个内存的大小为Elemtype这个结构体的size*LIST_INIT_SIZE的乘积这么大</p>
<pre><code>malloc 是用于分配指定size的内存的库函数 
原型：extern void *malloc(unsigned int num_bytes);
用法：#include &lt;malloc.h&gt;
或#include&lt;stdlib.h&gt;
功能：分配长度为num_bytes字节的内存块
说明：如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。
当内存不再使用时，应使用free()函数将内存块释放。
malloc的语法是：指针名=（数据类型*）malloc（长度）,（数据类型*）表示指针.
</code></pre><h3 id="结构体别名"><a href="#结构体别名" class="headerlink" title="结构体别名"></a>结构体别名</h3><blockquote>
<p>引用自<a href="http://zhidao.baidu.com/link?url=57aywD0Q6WTnl7XKbIHuEs1JiraAF7HD5QJjbaX0PTRLTfwph7Xcrzli9nfngR7PleOh5aRik8Fjqw7ENuhhWzUDYhy6yHA9-Sicf1VNPQO" target="_blank" rel="external">百度知道</a></p>
</blockquote>
<p>关于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef struct LNode&#123;</div><div class="line">    ElemType data;</div><div class="line">    struct LNode *next;</div><div class="line">&#125;LNode,*LinkList;</div></pre></td></tr></table></figure></p>
<p>LNode和*LinkList;是与前面的typedef配合起来使用的，意思是给你声明的结构体起一个别名叫LNode，同时起一个指针别名叫LinkList，以后就可以用以下方式声明变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LNode a;//声明了一个struct LNode型变量a，与写struct LNode a;等价，省心多了；</div><div class="line">LinkList p;//声明了一个struct LNode *型指针变量p，与写struct LNode *p等价，也省心多了。</div></pre></td></tr></table></figure></p>
<p>如果没有前面的typedef，意思就不一样了：LNode就只是一个struct LNode型变量，LinkList也就只是个struct LNode *型指针。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VPS服务器搭建ghost blog]]></title>
      <url>http://yoursite.com/2016/09/18/VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAghost%20blog/</url>
      <content type="html"><![CDATA[<p>####前传</p>
<hr>
<p>&#160;&#160;无意中看到markdown语法，立马就喜欢上它，所以就想博客能不能也用这种语法写，因为我的博客原来一直用wordpress来搞，第一个想到的当然是用插件，当然也下到了，不过估计是主题css的问题，代码框老显示不出来，对于想要代码框的我来说实在是不能忍，就上网搜有没有其他的博客工具，哈哈终于找到了它，ghostblog！</p>
<p>&#160;&#160;但是安装下来着实费了不少功夫。总结起来比较简便的方法还是AMH+Node.js<br><a id="more"></a><br>注：以下步骤引用自：<br><a href="http://www.tuicool.com/articles/jQnIJf3" target="_blank" rel="external">http://www.tuicool.com/articles/jQnIJf3</a></p>
<ol>
<li><p>安装AMH，网上有详细教程</p>
</li>
<li><p>安装Node.js</p>
<p>也是网上的教程，不过有些gcc版本可能支持不了太新的Node.js</p>
</li>
<li><p>安装ghost</p>
<ol>
<li><p>新建数据库</p>
<p>登陆AMH面板，进入数据库，快速建库，很简单。</p>
</li>
<li><p>新建站点</p>
<p>登陆AMH面板，点击虚拟主机，新建虚拟主机，这也很简单。</p>
</li>
<li><p>安装Ghost程序</p>
<p>这里我们使用的是 <a href="http://ghostchina.com/" target="_blank" rel="external">http://ghostchina.com/</a> 发布的中文版Ghost。</p>
<p>登陆ssh，运行命令，</p>
<pre><code>wget http://dl.ghostchina.com/Ghost-0.5.9-zh-full.zip //下载Ghost到VPS  
unzip Ghost-0.5.9-zh-full.zip -d ghost //解压Ghost-0.5.9-zh-full.zip并xiu修改文件夹名为ghost  
</code></pre><p>如没有安装unzip，请执行 sudo yum install unzip 来安装，</p>
<p>&#160;&#160;到这里需要注意，ghost文件夹里的所有文件全部移动到之前你新建虚拟主机的web根目录下，不然会出错，文件移动号后，进入虚拟主机的web根目录下</p>
<pre><code>cd /虚拟主机web根目录路径   //进入虚拟主机web根目录，此步骤不能少  
cp config.example.js config.js //复制config.example.js成config.js  
vim config.js //用vim编辑config.js文件  
</code></pre><p>将相关位置修改成以下这样：</p>
<pre><code>production: {  
url: &apos;http://your_blog_url&apos;,
mail: {},
database: {
client: &apos;mysql&apos;,
connection: {
host     : &apos;127.0.0.1&apos;, 
user     : &apos;root&apos;, //暂且直接用root账户
password : &apos;password&apos;, //你的root账户密码
database : &apos;ghost&apos;, //你之前建立的数据库名
charset  : &apos;utf8&apos;
},
debug: false
},
server: {
// Host to be passed to node&apos;s                 `net.Server#listen()`
host: &apos;127.0.0.1&apos;,//改为0.0.0.0，否则他人无法访问
// Port to be passed to node&apos;s `net.Server#listen()`, for iisnode set this to `process.env.PORT`
port: &apos;2368&apos;
}
},
</code></pre><p>这里说一下vim编辑器的一般用法：</p>
<p>i: 进入插入编辑模式</p>
<p>ESC: 退出编辑模式</p>
<p>:x : 退出并保存文件（退出编辑模式下使用）</p>
</li>
<li><p>配置Nginx</p>
<p>由于之前你新建的虚拟主机的Nginx配置是为php服务的，所以，我们要将其进行修改成为node.js服务，</p>
<pre><code>vim /usr/local/nginx/conf/***.conf //进入Nginx配置文件目录,并编辑与你新建的虚拟主机相应的Nginx配置文件  
</code></pre><p>清空里面的内容，替换成以下：</p>
<pre><code>server {  
listen 80;
server_name  xxx.com www.xxxx.com; //替换为你自己的域名！
location / {
proxy_set_header   X-Real-IP $remote_addr;
proxy_set_header   Host      $http_host;
proxy_pass         http://127.0.0.1:2368;
 }
}
</code></pre><p>然后进AMH控制面板重启一下Nginx，</p>
<pre><code>npm start --production //启动Ghost，如果不出差错，在浏览器输入你的域名就可以看见Ghost的界面了，--production不能少  
</code></pre><p>别以为到这就结束了，目前Ghost在我们SSH断开后就会结束进程，所以我们继续：</p>
</li>
<li><p>安装forever守护Ghost进程</p>
<p>为了让Ghost程序能够后台运行不中断，我们还得再安装个工具，就是forever，使用-g参数就是在全局模式中安装，这样我们就可以再任何地方都能使用forever命令了。</p>
<p>以下命令都请在网站根目录下运行</p>
<pre><code>npm install forever -g //forever的安装命令  
NODE_ENV=production forever start index.js  //安装forever后的Ghost启动命令  
</code></pre><p>   好了，Ghost就此安装完成</p>
</li>
</ol>
</li>
</ol>
<p>Ghost相关命令：</p>
<p>//以下命令都请在网站根目录下运行</p>
<pre><code>NODE_ENV=production forever start index.js //启动Ghost  
NODE_ENV=production forever stop index.js //停止Ghost  
NODE_ENV=production forever restart index.js //重启Ghost  
</code></pre><p>现在，你就可以通过AMH控制面板进行数据管理、在线的文件编辑和上传 同样，你也可以按正常步骤新建一个php网站。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[KeePass+KeePassHTTP+chromeIPass储存个人密码]]></title>
      <url>http://yoursite.com/2016/09/18/KeePass/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在密码越来越多，但是为了密码安全还是不愿所有网站用同一个密码。所以就想到了用密码管理软件。尝试过1Password和Lastpass，可惜都收费。所以找到了KeePass，不仅免费，还开源。支持多平台。结合插件，可以实现在chrome上自动填写密码。<br><a id="more"></a></p>
<blockquote>
<p>本文参考<a href="http://devzc.com/post/465" target="_blank" rel="external">http://devzc.com/post/465</a>写作而成，再次对原作者表示感谢。</p>
</blockquote>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><p>首先从以下网址下载所需文件</p>
<ul>
<li><p>KeePass主体程序:<br><a href="http://keepass.info/download.html" target="_blank" rel="external">http://keepass.info/download.html</a></p>
</li>
<li><p>KeePassHTTP扩展下载:<br><a href="https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true" target="_blank" rel="external">https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true</a><br>源码: <a href="https://github.com/pfn/keepasshttp/" target="_blank" rel="external">https://github.com/pfn/keepasshttp/</a></p>
</li>
<li><p>chromeIPass:<br>Chrome应用商店搜索[chromeIPass],安装即可;<br>chromeIPass源码: <a href="https://github.com/pfn/passifox" target="_blank" rel="external">https://github.com/pfn/passifox</a></p>
</li>
</ul>
</li>
<li><p>依次安装以上文件。<br>注意KeePassHTTP的配置：</p>
<ol>
<li>将KeePassHttp.plgx放在KeePass.exe同目录下,重启KeePass。并单击工具下的“KeePassHttp Options”。</li>
<li>按照如下图配置：<br><img src="http://i.imgur.com/0R82YzX.png" alt=""></li>
<li>点击Chrome上的chromeIPass图标，会出现Connect按钮,点击进去；</li>
<li>Key_Name自己起名</li>
<li><p>保存后，重新点击chromeIPass，若出现以下信息，则说明成功：</p>
<p><img src="http://i.imgur.com/PDcuXmf.png" alt=""></p>
</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用KeePass2.x进行ftp或webdev同步]]></title>
      <url>http://yoursite.com/2016/09/18/%E5%88%A9%E7%94%A8Keepass2.x%E8%BF%9B%E8%A1%8Cftp%E6%88%96webdev%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>方法参考<a href="http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html" target="_blank" rel="external">http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇博文介绍了利用软件Keepass保存密码。其实借助Dropbox或者其他同步软件将数据库.kpbx文件进行备份也很简单。但是由于某些原因，Dropbox很难上去。所以突然想到能否将文件保存在我的vps服务器上。在网上搜索教程就找到了这个方法。</p>
<a id="more"></a>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>其实同步很简单，只要借助KeePass自带的URL同步功能即可。如下图：</p>
<p><img src="http://i.imgur.com/XkgdsxV.png" alt=""></p>
<p>也就是选择“与URL同步”，<strong>但是要注意，必须现在指定位置建立一个.kpdb数据库文件</strong>，同步地址就填写该文件地址。</p>
<h2 id="自动同步"><a href="#自动同步" class="headerlink" title="自动同步"></a>自动同步</h2><p>手动同步很麻烦，那么怎么设置自动同步呢？这里可以借助KeePass自带的触发器功能，有点像Windows的“计划任务”，以下方法可以实现本地保存后，立马服务器同步的功能。</p>
<ol>
<li><p>“属性”选项卡，命名该触发器，如 SavedSync.（注意，后面动作选择“更改触发器 开/关 状态”时触发器名称只能手动输入，无法选择，所以这里命名还是从简，具体描述可以写到下面的注释栏。）同时勾选“启用”和“启动时打开”复选框。 </p>
</li>
<li><p>“事件”选项卡，添加事件，选择“已保存数据库文件”，下面的文件/URL - 比较和过滤器可以无视。不过如果有多个数据库文件需要同步，则可以根据待保存的数据库文件名设定后续同步动作。这里我的设置如下：<br><img src="http://i.imgur.com/4zcHdI0.png" alt=""></p>
</li>
<li><p>“条件”选项卡不加入任何条件。你也可以选择同步到 URL 文件时选择条件“远程主机可以连接(ping)”，这样只有当 URL 文件可以访问时才同步。不过我倾向于不加入这个条件，这样即使后面无法完成同步操作，也会有弹窗提示，让我们能更清楚当前的同步状态。</p>
</li>
</ol>
<p>我这里只做了简写，如果遇到某些问题，或者想更加详细地了解“触发器”功能，请访问原博客地址：<a href="http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html" target="_blank" rel="external">http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html</a></p>
<p>在此，对原作者表示感谢！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/09/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo系列教程（二）——利用Swiftype建立站内搜索]]></title>
      <url>http://yoursite.com/2016/05/14/Hexo%E5%88%A9%E7%94%A8Swiftype%E5%BB%BA%E7%AB%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>部分内容引用自<a href="http://www.jianshu.com/p/2010ad07d960" target="_blank" rel="external">http://www.jianshu.com/p/2010ad07d960</a></p>
<p>原文链接：<a href="http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/" target="_blank" rel="external">http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/</a><br>作者：drunkevil</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此方法是基于jacman主题，其余主题可能稍有不同</p>
<h2 id="Swiftype账号注册及搜索引擎开通"><a href="#Swiftype账号注册及搜索引擎开通" class="headerlink" title="Swiftype账号注册及搜索引擎开通"></a>Swiftype账号注册及搜索引擎开通</h2><ul>
<li>进入<a href="https://swiftype.com/" target="_blank" rel="external">Swiftype官网</a>注册账号，并根据提示初始化搜索引擎。</li>
<li>获得js代码，复制到jacman\layout\ _partial目录下的footer.ejs文件，在最后一个<code>&lt;/div&gt;</code>标签前即可。<a id="more"></a>
<h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2></li>
</ul>
<ol>
<li><p>在jacman主题下的_config.yml文件末尾添加如下代码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">swift_search:</div><div class="line">     	enable: true</div></pre></td></tr></table></figure>
</li>
<li><p>在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: search</div><div class="line">title: search</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
<li><p>找到jacman\layout\ _partial目录下的header.ejs文件，在其中添加如下代码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.swift_search.enable)&#123; %&gt;</div><div class="line">   &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class="line">   &lt;input type=&quot;text&quot; id=&quot;st-search-inpu&quot; maxlength=&quot;20&quot; placeholder=&quot;搜索&quot; /&gt;</div><div class="line">   &lt;/form&gt;</div><div class="line">&lt;% &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将jacman\layout\ _partial目录下的search.ejs中的内容替换为如下代码（主要用来控制结果的显示样式，可根据个人爱好修改）：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;% if(theme.swift_search.enable) &#123; %&gt;</div><div class="line">   &lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;</div><div class="line">     &lt;div id=&quot;st-results-container&quot; style=&quot;width:70%; margin:1.5em auto&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.st-result-text &#123;</div><div class="line">background: #fafafa;</div><div class="line">display: block;</div><div class="line">border-left: 0.5em solid #ccc;</div><div class="line">-webkit-transition: border-left 0.45s;</div><div class="line">-moz-transition: border-left 0.45s;</div><div class="line">-o-transition: border-left 0.45s;</div><div class="line">-ms-transition: border-left 0.45s;</div><div class="line">transition: border-left 0.45s;</div><div class="line">padding: 0.5em;</div><div class="line">&#125;</div><div class="line">@media only screen and (min-width: 768px) &#123;</div><div class="line">.st-result-text &#123;</div><div class="line">padding: 1em;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line">.st-result-text:hover &#123;</div><div class="line">     border-left: 0.5em solid #ea6753;</div><div class="line">   &#125;</div><div class="line">.st-result-text h3 a&#123;</div><div class="line">     color: #2ca6cb;</div><div class="line">     line-height: 1.5;</div><div class="line">     font-size: 22px;</div><div class="line">   &#125;</div><div class="line">.st-snippet em &#123;</div><div class="line">     font-weight: bold;</div><div class="line">     color: #ea6753;</div><div class="line">   &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>至此，配置完成，hexo d -g重新部署一下即可出现站内搜索功能。搜索框的样式可根据个人爱好在CSS文件中修改。</p>
<p>麻雀虽小，五脏俱全，博客的基础功能基本上都已实现。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win8.1与ubuntu双系统安装（硬盘安装）]]></title>
      <url>http://yoursite.com/2016/05/13/win8.1%E4%B8%8Eubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>部分内容引用自<a href="http://blog.csdn.net/risingwonderland/article/details/37902777" target="_blank" rel="external">http://blog.csdn.net/risingwonderland/article/details/37902777</a><br>作者：RisingWonderland</p>
</blockquote>
<h2 id="安装特点"><a href="#安装特点" class="headerlink" title="安装特点"></a>安装特点</h2><p>此方法可使用Win8.1,Ubuntu双系统，直接硬盘安装，无需制作U盘启动，很方便。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>下载Ubuntu镜像文件</li>
<li>下载EasyBCD<a id="more"></a>
<h2 id="第一步，磁盘分区"><a href="#第一步，磁盘分区" class="headerlink" title="第一步，磁盘分区"></a>第一步，磁盘分区</h2></li>
</ul>
<p>在Windows下，分割出一块分区，我分出来的是50G，建议在磁盘最后分。注意该分区不要增添盘符，而是让其保持“空闲”状态。</p>
<h2 id="第二步，NeoGrub"><a href="#第二步，NeoGrub" class="headerlink" title="第二步，NeoGrub"></a>第二步，NeoGrub</h2><p>Windows安装好EasyBCD软件，安好后，点击左侧“添加新条目”，再点击右侧“NeoGrub”选项卡，点击“安装”按钮。如下图：</p>
<p><img src="http://i.imgur.com/ygVfVWC.png" alt=""></p>
<p>安装后，点击“配置”按钮，会打开一个名为“menu.lst”的记事本文件。清空文件内容，写入下面的文字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title Install Ububtu</div><div class="line">root (hd0,0)</div><div class="line">kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8</div><div class="line">initrd (hd0,0)/initrd.lz</div></pre></td></tr></table></figure></p>
<p>如下图所示，注意空格：</p>
<p><img src="http://i.imgur.com/6tqyUBh.png" alt=""></p>
<p></p><p style="color:#DD2D2D"><strong>注意1</strong></p>文件第2、3、4行出现的“(hd0,0)”指向的是当前系统盘的位置，我这里是C盘。但假如C盘并非首个分区，而是第二个，需要修改为“(hd0,1)”，依此类推。<p></p>
<p></p><p style="color:#DD2D2D"><strong>注意2</strong></p>文件第三行，“ubuntu-14.04-desktop-amd64.iso”是我的Ubuntu系统镜像的文件名，将其修改为你的。<p></p>
<p></p><p style="color:#DD2D2D"><strong>注意3</strong></p>文件第三行出现了“vmlinuz.efi”，由于我安装的Ubuntu是64位操作系统，此处必须是“vmlinuz.efi”，不能缺少扩展名。<p></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>使用压缩工具打开Ubuntu镜像文件，将“.disk”文件夹和casper文件夹内的“initrd.lz”和“vmlinuz.efi”文件复制到C盘根目录，再将Ubuntu系统镜像文件复制到C盘根目录：</p>
<p><img src="http://i.imgur.com/XVxEkBK.png" alt=""></p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul>
<li>重启计算机，在启动界面看到操作系统选择项，选择“NeoGrub引导加载器”：<br><img src="http://o6hbo6ufa.bkt.clouddn.com/4.png" alt=""></li>
<li>之后出现Ubuntu选择界面，选择“Install Ubuntu”。</li>
<li>注意：此处有可能出现“File not found”错误，若出现，请转至原文博客查看：<a href="http://blog.csdn.net/risingwonderland/article/details/37902777" target="_blank" rel="external">http://blog.csdn.net/risingwonderland/article/details/37902777</a></li>
</ul>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>成功进入Ubuntu试用界面后，桌面上有两个文件。<br>按Ctrl+Alt+T打开终端，输入<code>sudo umount –l /isodevice</code>，取消光盘驱动器挂载，否则在后面安装过程中可能会无限卡进度：</p>
<p></p><p style="color:#DD2D2D"><strong>注意</strong></p>注意空格，而且“-l”中的“l”是大写字母“L”的小写形态。不是数字1，也不是字母“i”。<p></p>
<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>双击桌面图标“安装Ubuntu14.04 LTS”，开始安装Ubuntu。<br>如果你连接了网络，可以选择“安装中下载更新”，会延长安装时间，也可以在安装完Ubuntu系统后再下载安装更新。<br>在“安装类型”界面会有多个安装选项：<br>如果选择第一项，Ubuntu会自动进行分区安装，之后与Windows操作系统共存为双系统。对分区没有细致要求的用户选择此项即可，本教程即可直接跳过步骤Step7、Step8。如果要自定义分区，选择“其它选项”。此处，我选择“其他选项”。<br><img src="http://o6hbo6ufa.bkt.clouddn.com/5.png" alt=""></p>
<p>我们要将Ubuntu安装在“空闲”分区内。选择“空闲”分区，再点击左下方红线处的加号，进行分区。</p>
<p>下面说一下我的分区状况：</p>
<p>总共50GB空闲分区，（分区时需要选择文件系统类型，选择“Ext4”即可）</p>
<ul>
<li>根目录“/”我分了8 GB；</li>
<li>交换分区swap我分了2 GB；（类似于虚拟内存）</li>
<li>/boot我分了200 MB；（引导分区）</li>
<li>/home 10 GB;（存放用户文件）</li>
<li>/usr 30GB;（存放应用程序）</li>
</ul>
<h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>分区完成后，开始安装。<br>如果你没有分配交换空间，系统会给出提示，跳过即可。</p>
<h2 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h2><p>安装完成后，选择重启。如果一切正常，可以看到如下图所示的Ubuntu样式的启动项选择界面：</p>
<p><img src="http://o6hbo6ufa.bkt.clouddn.com/6.png" alt=""></p>
<h2 id="可选操作"><a href="#可选操作" class="headerlink" title="可选操作"></a>可选操作</h2><p>在系统启动界面，Win8.1系统处于最后一项，如果需要让Win8.1处于第一项，可以这样设置：</p>
<ol>
<li>进入Ubuntu系统。</li>
<li>Ctrl+Alt+T打开终端，输入“sudo nautilus”，以root权限打开资源管理器。</li>
<li>找到“30_os-prober”文件，将其名称修改为“06_os-prober”即可：</li>
</ol>
<p>进入Windows系统，清除C盘下之前复制的文件。<br>打开EasyBCD，在之前的“添加新条目”功能中，点击“删除”按钮，清除“NeoGrub”引导。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是XXX。欢迎来到我的个人技术博客。</p>
<p>这里用markdown写下你的简介，就跟平时写md一样就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://yoursite.com/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
